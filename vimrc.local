" Color scheme
colorscheme vividchalk
highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

" set cursorline

function! RequireIt()
  normal ma
  normal gny
  normal gg
  normal O
  normal P
  :1s/\(.*\)/require 'ncpdp\/\1'/
  :1s/::/\//ge
  :1s/PA_Structures/PaStructures/e
  :1s/\<\u\|\l\u/\=len(submatch(0)) == 1 ? tolower(submatch(0)) : submatch(0)[0].'_'.tolower(submatch(0)[1])/g
  normal `a
endfunction
map <Leader>req :call RequireIt()<CR>

unmap <Leader>a

call matchadd('ColorColumn', '\%101v.\+', 100)

let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1

set noautowrite " I don't know why thoughtbotters think autowrite is good.

let g:airline_powerline_fonts = 1

" disable loading syntastic's rubocop checker by marking it as already loaded.
let g:loaded_syntastic_ruby_rubocop_checker = 1

let g:rspec_command = "bundle exec rspec {spec}"

let g:rspec_command = "!" . rspec_command
" let g:rspec_command = "echom system('echo \"" . rspec_command . "\" >> ~/.wrench')"
" map <Leader>fun :echom system('echo ./script/development_functional_spec >> ~/.wrench')<CR>

" function! MapCR()
"   if &buftype == "quickfix"
"     unmap <CR>
"   else
"     nnoremap <CR> :call RunCurrentSpecFile()<CR>
"   endif
" endfunction
"
" augroup MapCR
"   autocmd!
"   autocmd BufWinEnter * :call MapCR()
" augroup END

map <Leader>let :s/\(\S*\)\s*=\(.*\)/let(:\1) {\2 }/<CR> \| :normal ==<CR>
map <Leader>unlet :s/let(:\(\S*\))\s*{\(.*\) }/\1 =\2/<CR> \| :normal ==<CR>
map <Leader>unlet :normal ^df:f)cf{ =$xx==
map <Leader>et Iexpect(<ESC>A).to
map <Leader>ete Iexpect(<ESC>A).to eq()<ESC>i

map <Leader>q :quit <CR>

augroup EditPasteBuffer
  autocmd!
  autocmd BufReadPre ~/.pastebuffer set noeol binary
  autocmd BufReadPost ~/.pastebuffer execute "normal ggdG:read !pbpaste\<CR>ggdd"
  autocmd BufWritePost ~/.pastebuffer silent write !pbcopy
augroup END

augroup NewSpecFile
  autocmd!
  autocmd BufNewFile *_spec.rb read ~/.vim/skeleton_spec.rb | 0d
augroup END

let g:github_api_url = "http://git.innova-partners.com/api/v3"

map <Leader>k :cg quickfix.out \| cwindow <CR>

" convert single to double quotes
map <Leader>dq :%s/'/"/g \| write <CR>
map <Leader>sq :%s/"/'/g \| write <CR>

let rails_buffer_helper='source /usr/local/opt/chruby/share/chruby/chruby.sh; chruby `cat .ruby-version`; spring'

" Fix common typo
iab recieve receive

" Shortcut for uuid
iab Ã¼ SecureRandom.uuid

" Alignment macros
nmap <Leader>a= :Tabularize /=\(>\)\@!<CR>
vmap <Leader>a= :Tabularize /=\(>\)\@!<CR>
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /^[^:]*:\zs<CR>
vmap <Leader>a: :Tabularize /^[^:]*:\zs<CR>
nmap <Leader>a{ :Tabularize / \zs{<CR>
vmap <Leader>a{ :Tabularize / \zs{<CR>

cmap Gs Gstatus
cmap Gc Gcommit

" Make Y behave consistently with D and C
map Y y$

map <Leader>bp Obinding.pry<ESC>:write<CR>

function! BackgroundBundle()
  let bundle         = 'bundle install --jobs=4 --retry=3 > log/bundle.log'
  let growl_success  = 'growlnotify bundle -m completed'
  let growl_failure  = 'cat log/bundle.log | growlnotify bundle failed'
  let cmd            = bundle . ' && ' . growl_success . ' || ' . growl_failure
  let background_cmd = '(' . cmd . ') &'
  let _              = system(background_cmd)
endfunction
map <Leader>b :call BackgroundBundle()<CR>
" map <Leader>b :echom system('echo bundle >> ~/.wrench')<CR>

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>n :call RenameFile()<cr>

" Start scrolling 3 lines before the border
set scrolloff=3

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

map <Leader>ra :%s/

imap <c-e> <c-o>$
imap <c-a> <c-o>^

" Quicker writes
map <Leader>w :write<cr>

" Move to adjacent tabs with H & L or ^h & ^l
nmap H gT
nmap L gt
map <c-h> gT
map <c-l> gt

" Make editing my vimrc easier
map <Leader>ev :tabedit ~/.vimrc.local<CR>
map <Leader>sv :source ~/.vimrc<CR>

" Change CtrlP selection behavior
" Enter to open the file in a new tab, Ctrl-t to reuse current tab
" (opposite of the defaults)
let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("e")': ['<c-t>'],
      \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
      \ }

" don't use arrow keys in Insert Mode
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>

" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" automatically remove trailing whitespace on save with trailertrash plugin
augroup TrailerTrash
  autocmd!
  autocmd BufWritePre * :Trim
augroup END

" don't show trailing whitespace when committing
let g:trailertrash_blacklist = ['.git/COMMIT_EDITMSG']

" :set paste and :set nopaste via F2
set pastetoggle=<F2>

set splitbelow
set splitright

" Improve syntax highlighting
augroup RubyFilesNotEndingInRB
  autocmd!
  autocmd BufRead,BufNewFile Gemfile,Guardfile,*.pill set filetype=ruby
augroup END
